(function() {
  if ('Discourse' in window && Discourse.__container__) {
    Discourse.__container__
      .lookup("service:theme-settings")
      .registerSettings(6, {"show_for_members":true,"show_for_anon":true,"display_on_mobile":true,"display_on_desktop":true,"display_on_homepage":true,"url_must_contain":"","dismissible":false,"collapsible":false,"default_collapsed_state":"expanded","cookie_lifespan":"day","cookie_name":"v1","full_width_banner":false,"banner_background_image":"https://imgur.com/a/8H9pmMG","background_color":"#fff","primary_text_color":"#191919","secondary_text_color":"#043aa0","link_text_color":"#fff","main_heading_content":"\u003ch2 class=\"x-title\" style=\"margin-bottom:0;padding-bottom:0;padding-top:0;\"\u003e\n  Welcome to the Jovian.ml Data Science forum\n\u003c/h2\u003e\n\u003c!--\n\u003cdiv class=\"colored-line\"\u003e\u003c/div\u003e\n\u003cdiv class=\"description\"\u003e\n  \u003cp\u003e\n   Join our global data science community of 15,000+ members from 150+ countries \n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colored-line\"\u003e\u003c/div\u003e\n--\u003e","first_column_content":"\u003ch3\u003eGet Started\u003c/h3\u003e\n\u003cdiv class=\"banner-list\"\u003e\n\u003cul style=\"list-style:none; text-align:center;\"\u003e\n    \u003cli\u003eIntroduce yourself\u003c/li\u003e\n    \u003cli\u003eBrowse the Forum Index\u003c/li\u003e\n    \u003cli\u003eRead the Code of Conduct\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\u003cbr\u003e\n\u003c/n\u003e\n\u003cdiv class=\"buttons\" id=\"my-button\"\u003e\n  \u003ca href=\"https://jovian.ml/forum/t/getting-started-guide/7103\" style=\"color:#fff\" class=\"btn btn-icon-text\"\u003eBegin now\u003c/a\u003e\n\u003c/div\u003e\n","second_column_content":"\u003ch3\u003eShare Your Work\u003c/h3\u003e\n\n\u003cdiv class=\"banner-list\"\u003e\n  \u003cul style=\"list-style:none; text-align:center;\"\u003e\n    \u003cli\u003eJupyter notebooks\u003c/li\u003e\n    \u003cli\u003eBlog posts\u003c/li\u003e\n    \u003cli\u003eVideo tutorials\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\n\u003cdiv class=\"buttons\" id=\"my-button\"\u003e\n  \u003ca  style=\"color:#fff\" href=\"https://jovian.ml/forum/c/share-your-work/30\" class=\"btn btn-icon-text\"\u003ePost now \u003c/a\u003e\n\u003c/div\u003e\n","third_column_content":"\u003ch3\u003eHelp \u0026 Support\u003c/h3\u003e\n\u003cdiv class=\"banner-list\"\u003e\n  \u003cul style=\"list-style:none; text-align:center;\"\u003e\n\n\u003cli\u003eAsk questions\u003c/li\u003e\n\u003cli\u003ePost new topics\u003c/li\u003e\n\u003cli\u003eHelp others\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cbr\u003e\n\n\u003cdiv class=\"buttons\" id=\"my-button\" align=\"center\"\u003e\n  \u003ca  style=\"color:#fff\" href=\"https://jovian.ml/forum/c/help/22\" class=\"btn btn-icon-text\"\u003eJoin now\u003c/a\u003e\n\u003c/div\u003e","fourth_column_content":"","first_column_size":"auto","second_column_size":"auto","third_column_size":"auto","fourth_column_size":"","first_column_icon":"","second_column_icon":"","third_column_icon":"","fourth_column_icon":""});
  }
})();
(function() {
  if ('Ember' in window) {
    Ember.TEMPLATES["/connectors/custom-banner/banner"] = Ember.HTMLBars.template({"id":null,"block":"{\"symbols\":[],\"statements\":[[0,\"\\n  \"],[1,[28,\"mount-widget\",null,[[\"widget\"],[\"banner-box-widget\"]]],false],[0,\"\\n\"]],\"hasEval\":false}","meta":{}});
  }
})();
(function() {
  if ('Ember' in window) {
    Ember.TEMPLATES["/connectors/above-main-container/banner-themes"] = Ember.HTMLBars.template({"id":null,"block":"{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"if\",[[28,\"theme-setting\",[6,\"show_for_members\"],null]],null,{\"statements\":[[4,\"if\",[[24,[\"currentUser\"]]],null,{\"statements\":[[0,\"      \"],[1,[28,\"plugin-outlet\",null,[[\"name\"],[\"custom-banner\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[4,\"if\",[[28,\"theme-setting\",[6,\"show_for_anon\"],null]],null,{\"statements\":[[4,\"unless\",[[24,[\"currentUser\"]]],null,{\"statements\":[[0,\"      \"],[1,[28,\"plugin-outlet\",null,[[\"name\"],[\"custom-banner\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}","meta":{}});
  }
})();
(function () {
  if ('Discourse' in window && typeof Discourse._registerPluginCode === 'function') {
    var __theme_name__ = "Versatile Banner";
    var settings = Discourse.__container__.lookup("service:theme-settings").getObjectForTheme(6);
    var themePrefix = function themePrefix(key) {
      return 'theme_translations.6.' + key;
    };

    Discourse._registerPluginCode('0.8.18', function (api) {
      try {
        var setupBanner = function setupBanner() {
          var collapsedCookie = void 0;
          var closedCookie = void 0;
          if ($.cookie("banner_collapsed")) {
            collapsedCookie = JSON.parse($.cookie("banner_collapsed"));
            if (collapsedCookie.name != settings.cookie_name) {
              $.removeCookie("banner_collapsed", { path: '/' });
            }
          }
          if ($.cookie("banner_closed")) {
            closedCookie = JSON.parse($.cookie("banner_closed"));
            if (closedCookie.name != settings.cookie_name) {
              $.removeCookie("banner_closed", { path: '/' });
            }
          }

          if (!$.cookie("banner_collapsed") && settings.collapsible && settings.default_collapsed_state == "collapsed" || collapsedCookie && collapsedCookie.collapsed == "true") {
            toggleState = "collapsed";
            return ".hidden";
          } else {
            toggleState = "expanded";
            return "";
          }
        };

        var _require = require("discourse-common/lib/icon-library"),
            iconNode = _require.iconNode,
            convertIconClass = _require.convertIconClass;

        var h = require("virtual-dom").h;

        var columnIcons = [settings.first_column_icon, settings.second_column_icon, settings.third_column_icon, settings.fourth_column_icon];

        var cookieExpDate = void 0;
        if (settings.cookie_lifespan == "none") {
          $.removeCookie("banner_closed", { path: '/' });
          $.removeCookie("banner_collapsed", { path: '/' });
        } else {
          cookieExpDate = moment().add(1, settings.cookie_lifespan).toDate();
        }

        var toggleState = void 0;

        api.createWidget("banner-box-widget", {
          tagName: "div.banner-box",
          html: function html(attrs) {

            var path = window.location.pathname;

            var showOnHomepage = void 0;
            if (settings.display_on_homepage) {
              var hasSingleForwardSlash = new RegExp('[^\/]\/[^\/]');
              showOnHomepage = !hasSingleForwardSlash.test(path);
            }

            var urlMatch = void 0;
            if (settings.url_must_contain.length) {
              var escapedList = settings.url_must_contain.replace(/\//g, '\\/');
              var regex = new RegExp(escapedList);
              urlMatch = regex.test(path);
            }

            if (!$.cookie("banner_closed") && (showOnHomepage || urlMatch)) {
              return [h('div.container', [this.attach("banner-button-container-widget"), h('div.section-header', { innerHTML: settings.main_heading_content }), this.attach('banner-content-widget')])];
            }
          }
        });

        api.decorateWidget('banner-box-widget:after', function (helper) {
          helper.widget.appEvents.on('page:changed', function () {
            helper.widget.scheduleRerender();
          });
        });

        api.createWidget("banner-button-container-widget", {
          tagName: "div.button-container",
          html: function html(attrs) {
            var buttons = [];

            if (settings.dismissible) {
              buttons.push(this.attach("button", {
                label: themePrefix("close.label"),
                title: themePrefix("close.title"),
                icon: "times",
                action: "buttonPressed",
                actionParam: "close",
                className: "close"
              }));
            }
            if (settings.collapsible) {
              buttons.push(this.attach("button", {
                label: this.toggleLabel(),
                title: themePrefix("toggle.title"),
                icon: this.toggleIcon(),
                action: "buttonPressed",
                actionParam: "toggle",
                className: "toggle"
              }));
            }
            return buttons;
          },
          buttonPressed: function buttonPressed(button) {
            if (button == "close") {
              $(".banner-box").addClass("hidden");
              if (cookieExpDate) {
                var bannerState = { name: settings.cookie_name, closed: "true" };
                $.cookie("banner_closed", JSON.stringify(bannerState), { expires: cookieExpDate, path: '/' });
              }
            } else if (button == "toggle") {
              toggleState = toggleState === "expanded" ? "collapsed" : "expanded";
              $("#banner-content_wrap").slideToggle();

              if (cookieExpDate) {
                var _bannerState = void 0;
                if ($.cookie("banner_collapsed")) {
                  _bannerState = JSON.parse($.cookie('banner_collapsed'));
                  _bannerState.name = settings.cookie_name;
                  if (_bannerState.collapsed == "false") {
                    _bannerState.collapsed = "true";
                  } else {
                    _bannerState.collapsed = "false";
                  }
                } else {
                  if (settings.default_collapsed_state == "collapsed") {
                    _bannerState = { name: settings.cookie_name, collapsed: "false" };
                  } else {
                    _bannerState = { name: settings.cookie_name, collapsed: "true" };
                  }
                }
                $.cookie("banner_collapsed", JSON.stringify(_bannerState), { expires: cookieExpDate, path: '/' });
              }
            }
          },
          toggleIcon: function toggleIcon() {
            return toggleState === "expanded" ? "chevron-up" : "chevron-down";
          },
          toggleLabel: function toggleLabel() {
            return toggleState === "expanded" ? themePrefix("toggle.collapse_label") : themePrefix("toggle.expand_label");
          }
        });

        api.createWidget("banner-column-icon", {
          tagName: "div.icon",
          html: function html(attrs) {
            var columnIcon = columnIcons[attrs.column];
            if (columnIcon.includes("http") || columnIcon.includes("/forum/uploads/")) {
              return h("img.responsive-img", { src: columnIcon });
            } else if (columnIcon) {
              var covertedIcon = convertIconClass(columnIcons[attrs.column]);
              return iconNode(covertedIcon);
            }
            return;
          }
        });

        api.createWidget("banner-content-widget", {
          tagName: "div#banner-content_wrap" + setupBanner(),
          html: function html(attrs) {

            var columns = [];

            if (settings.first_column_content) {
              columns.push(h('div.first_column.single-box', [this.attach('banner-column-icon', { column: 0 }), h('div', { innerHTML: settings.first_column_content })]));
            }

            if (settings.second_column_content) {
              columns.push(h('div.second_column.single-box', [this.attach('banner-column-icon', { column: 1 }), h('div', { innerHTML: settings.second_column_content })]));
            }

            if (settings.third_column_content) {
              columns.push(h('div.third_column.single-box', [this.attach('banner-column-icon', { column: 2 }), h('div', { innerHTML: settings.third_column_content })]));
            }

            if (settings.fourth_column_content) {
              columns.push(h('div.fourth_column.single-box', [this.attach('banner-column-icon', { column: 3 }), h('div', { innerHTML: settings.fourth_column_content })]));
            }

            return h('div.row', columns);
          }
        });
      } catch (err) {
        var rescue = require("discourse/lib/utilities").rescueThemeError;
        rescue(__theme_name__, err, api);
      }
    });
  }
})();